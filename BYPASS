if not game:IsLoaded() then
    game.IsLoaded:Wait()
end

warn("Please execute twice.")

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

loadstring(game:HttpGet("https://raw.githubusercontent.com/AnthonyIsntHere/anthonysrepository/main/scripts/AntiChatLogger.lua", true))()

local Window = Rayfield:CreateWindow({
   Name = "MFS Bypasser",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "standard bypasser",
   LoadingSubtitle = "by Sirius",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Swears = Window:CreateTab("Swears", 4483362458) -- Title, Image
local Tab1 = Window:CreateTab("Tab Example", 4483362458) -- Title, Image
local Tab2 = Window:CreateTab("Tab Example", 4483362458) -- Title, Image
local Tab3 = Window:CreateTab("Tab Example", 4483362458) -- Title, Image

local StandardMethod = {
    a = "a󠀀", b = "b󠀀", c = "c󠀀", d = "d󠀀", e = "e󠀀", f = "f󠀀", g = "g󠀀", h = "h󠀀",
    i = "i", j = "j󠀀", k = "k󠀀", l = "l󠀀", m = "m󠀀", n = "n󠀀", o = "o󠀀", p = "p󠀀",
    q = "q󠀀", r = "r󠀀", s = "s󠀀", t = "t󠀀", u = "u󠀀", v = "v󠀀", w = "w󠀀", x = "x󠀀",
    y = "y󠀀", z = "z󠀀", A = "A󠀀", B = "B󠀀", C = "C󠀀", D = "D󠀀", E = "E󠀀", F = "F󠀀",
    G = "G󠀀", H = "H󠀀", I = "I󠀀", J = "J󠀀", K = "K󠀀", L = "L󠀀", M = "M󠀀", N = "N󠀀",
    O = "O󠀀", P = "P󠀀", Q = "Q󠀀", R = "R󠀀", S = "S󠀀", T = "T󠀀", U = "U󠀀", V = "V󠀀",
    W = "W󠀀", X = "X󠀀", Y = "Y󠀀", Z = "Z󠀀"
}

local function bypassMessage(message)
    local bypassedMessage = ""
    local wordCount = 0
    
    for i = 1, #message do
        local char = message:sub(i, i)
        bypassedMessage = bypassedMessage .. (StandardMethod[char] or char)
        
        if char == " " then
            wordCount = wordCount + 1
            if wordCount % 6 == 0 then
                bypassedMessage = bypassedMessage .. " "
            end
        end
    end

    bypassedMessage = bypassedMessage:gsub(" ", function()
        return math.random(2) == 7 and "" or "" or ""
    end)

    local actualWordCount = 0
    bypassedMessage = bypassedMessage:gsub("[]", function(fakeSpace)
        actualWordCount = actualWordCount + 1
        if actualWordCount % 7 == 0 then
            return " "
        else
            return fakeSpace
        end
    end)

    bypassedMessage = "󠀀" .. bypassedMessage .. "󠀀"

    return bypassedMessage
end

local TextChatService = game:GetService("TextChatService")
local player = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local tagBool = true

local sendMessage = function(message)
    local Chat = game:GetService("Chat")
    local success, filteredMessage = pcall(function()
        return Chat:FilterStringForBroadcast(message, player)
    end)

    if not success then
        warn("Filtering failed. Proceeding without tag detection.")
        filteredMessage = message
    end

    local function normalizeString(str)
        return str:gsub("%s+", ""):lower()
    end

    local isTagged = normalizeString(filteredMessage) ~= normalizeString(message)

    if TextChatService then
        local textChannels = TextChatService:FindFirstChild("TextChannels")
        if textChannels then
            local textChannel = textChannels:WaitForChild("RBXGeneral")
            if textChannel then
                if tagBool and isTagged then
                    textChannel:DisplaySystemMessage('<font color="#FF7F50">[Motherfuckers Bypasser] Detected tags!</font>')
                else
                    textChannel:SendAsync(message)
                end
                return
            else
                warn("No suitable text channel found in TextChatService. Falling back to legacy chat.")
                if ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") then
                    if tagBool and isTagged then
                        game.StarterGui:SetCore("ChatMakeSystemMessage",
                            {Text = "[Motherfuckers Bypasser] Detected tags!",
                            Color = Color3.fromRGB(255, 127, 80),
                            font = Enum.Font.SourceSansBold
                        })
                    else
                        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                    end
                else
                    warn("Legacy chat events are not available.")
                end
            end
        else
            warn("TextChannels not found in TextChatService. Falling back to legacy chat.")
            if ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") then
                if tagBool and isTagged then
                    game.StarterGui:SetCore("ChatMakeSystemMessage",
                        {Text = "[Motherfuckers Bypasser] Detected tags!",
                        Color = Color3.fromRGB(255, 127, 80),
                        font = Enum.Font.SourceSansBold
                    })
                else
                    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                end
            else
                warn("Legacy chat events are not available.")
            end
        end
    elseif ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") then
        if tagBool and isTagged then
            game.StarterGui:SetCore("ChatMakeSystemMessage",
                {Text = "[Motherfuckers Bypasser] Detected tags!",
                Color = Color3.fromRGB(255, 127, 80),
                font = Enum.Font.SourceSansBold
            })
        else
            ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
        end
    else
         warn("Legacy chat events are not available.")
    end
end

local bypassText = ""

local ChatBypassTextbox = Swears:CreateInput({
    Name = "Chat Bypass",
    Text = "",
    PlaceholderText = "Enter message to bypass",
    Flag = "ChatBypassTextbox",
    Callback = function(Text)
        bypassText = Text
    end
})

local SendButton = Swears:CreateButton({
    Name = "Send",
    Callback = function()
        if bypassText ~= "" then
            local bypassedText = bypassMessage(bypassText)

            sendMessage(bypassedText)
        else
            Rayfield:Notify({
                Title = "No message specified.",
                Content = "You didn't enter a message to bypass.",
                Duration = 6.5,
                Image = 4483362458
            })
        end
    end
})
